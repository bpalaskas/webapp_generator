[
    {
        "name": "config.py",
        "content": " ",
        "path": "app/config.py"
    },
    {
        "name": "symmetric_key.key",
        "content": "",
        "path": "app/symmetric_key.key"
    },
    {
        "name": "wsgi.py",
        "content": "",
        "path": "app/wsgi.py"
    },
    {
        "name": "admin.py",
        "content": "from flask import Blueprint, flash, redirect, url_for\nfrom flask import request, render_template\nfrom flask_admin.contrib.sqla import ModelView\nfrom wtforms.fields import TextAreaField\nfrom wtforms.widgets import TextArea\nfrom app.models.page import Page\nfrom app import db\nfrom bs4 import BeautifulSoup   \nimport sys\nimport zlib\nimport re\nimport bcrypt\nimport json\nimport base64\nimport cryptography.fernet\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom flask import session, redirect\n#gets login_required wrapper from ./login\nfrom app.controllers.login import login_required\nfrom cryptography.hazmat.primitives import serialization\nfrom cryptography.fernet import Fernet\nfrom app.services.json_tools import encrypt_json, decrypt_json\nfrom app.controllers.get_pages import result as pages_list\nwith open(\"symmetric_key.key\", \"rb\") as key_file:\n    symmetric_key = key_file.read()\ndef remove_jinja_templates(html_content):\n    # This regex will match content within { } brackets, accounting for nested brackets as well.\n    pattern = r'\\{[^{}]*\\}'\n    while re.search(pattern, html_content):\n        html_content = re.sub(pattern, '', html_content)\n    return html_content\n\n###FUNCTION TO GET VALUE OF AN OBJECT by matching the value of another key in the object. \n###Returns the content value of object in the list, with a matchig \"name\" value. made by chatgpt.\n\ndef get_content_by_name(object_list, search_name):\n    \n    # Iterate over each object in the list\n    for obj in object_list:\n        # Check if the object has the 'link' attribute and if it matches the search_name\n        if 'link' in obj and obj['link'] == search_name:\n            # If the object has the 'content' attribute, return its value\n            if 'content' in obj:\n                _content=obj['content']\n                try:\n                    try:\n                        decoded_bytes = base64.b64decode(obj['content'])\n                        decoded_content = zlib.decompress(decoded_bytes)\n\n                        html_content = (remove_jinja_templates((decoded_content.decode('utf-8'))))\n                        soup = BeautifulSoup(html_content, \"html.parser\")\n                        decoded_content = soup.get_text()\n                        \n                    except Exception as e:\n                        print(f\"Base64 data: {obj['content']}\")\n                        print(f\"Decoded content: {decoded_content}\")\n                        raise e\n                    \n                    \n                    return html_content\n                except Exception as e:\n                    return \"Error decoding base64 content: {}\".format(str(e))\n            # If the object does not have the 'content' attribute, return an error message\n            else:\n                return \"Error: Object with name '{}' does not have a 'content' attribute.\".format(search_name)\n    \n    # If no object with the given 'name' attribute is found, return an error message\n    return \"Error: No object with name '{}' found.\".format(search_name)\n\n\n\nadmin_custom_blueprint = Blueprint('admin_custom', __name__, template_folder='templates/admin')\n@admin_custom_blueprint.route('/login', methods=['GET', 'POST'])\ndef login():\n    if request.method == 'POST':\n        email = request.form['email']\n        password = request.form['password']\n\n        # Decrypt the existing user data\n        encrypted_data = open(\"app/data/encrypted_users.json\", \"rb\").read()\n        decrypted_data = decrypt_json(encrypted_data, symmetric_key)\n\n        # Initialize user_found as False\n        user_found = False\n\n        # Loop through the list of user dictionaries\n        for user in decrypted_data:\n            if user['email'] == email:\n                stored_password_hash = user['password']\n                if isinstance(stored_password_hash, str):\n                    stored_password_hash = stored_password_hash.encode('utf-8')  # Encode to bytes\n                user_found = True\n                break\n        if user_found:\n            print(f\"Stored password hash for debugging: {stored_password_hash}\",file=sys.stdout)\n\n            if isinstance(stored_password_hash, str):\n                stored_password_hash = stored_password_hash.encode('utf-8')\n\n            \n            try:\n                if bcrypt.checkpw(password.encode('utf-8'), stored_password_hash):\n                    session['public_key'] = user['public_key']\n                    session['logged_in'] = True\n                    session['email'] = email\n                    session['admin_authorized']=True\n                    return redirect(url_for(\"admin_custom.dashboard\"))\n                else:\n                    return \"Wrong password\", 401\n            except Exception as e:\n                return f\"An error occurred during password check: {e}\", 500\n    else:\n        return render_template('admin/login.html')\nclass PageModelView(ModelView):\n    column_exclude_list = ['content']\n    column_list = ('title', 'slug')\n    form_columns = ('title', 'slug', 'content')\n    form_widget_args = {\n        'content': {\n            'widget': TextArea()\n        }\n    }\n\n@admin_custom_blueprint.route('/access', methods=['GET', 'POST'])\ndef admin_access():\n    if request.method == 'POST':\n        secret_phrase = request.form.get('secret_phrase')\n        if secret_phrase == \"!Gratitude98\":\n            session['admin_authorized'] = True\n            return redirect(url_for('admin_custom.login'))\n    return render_template('admin/admin_access.html')\n\n\n###\n#THIS route creates a user with a public-private key pair. A little\n#overkill but wanted to get some practice on making \n#something for email and password that can stand up against\n#phone and OTP security, cryptography-wise\n###\n@admin_custom_blueprint.route('/admin_signup', methods=['GET', 'POST'])\ndef admin_signup():\n    if session['admin_authorized']==False:\n        return redirect(url_for('admin_custom.admin_access'))\n    else:\n        if request.method == 'POST':\n            email = request.form.get('email')\n            password = request.form.get('password')\n\n            private_key = rsa.generate_private_key(\n                public_exponent=65537,\n                key_size=2048\n            )\n            public_key = private_key.public_key()\n\n            pem_priv = private_key.private_bytes(\n                encoding=serialization.Encoding.PEM,\n                format=serialization.PrivateFormat.TraditionalOpenSSL,\n                encryption_algorithm=serialization.NoEncryption()\n            )\n            pem_pub = public_key.public_bytes(\n                encoding=serialization.Encoding.PEM,\n                format=serialization.PublicFormat.SubjectPublicKeyInfo\n            )\n\n            # Prepare user data\n            hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n            user_data = {\n                'email': email,\n                'password': hashed_password.decode('utf-8'),  # Decode to utf-8 string\n                'private_key': pem_priv.decode('utf-8'),\n                'public_key': pem_pub.decode('utf-8')\n            }\n            print(user_data['password'],file=sys.stdout)\n\n            encrypted_data = open(\"app/data/encrypted_users.json\", \"rb\").read()\n            users = decrypt_json(encrypted_data, symmetric_key)\n            if users is None:  #allows empty user file to be loaded without throwing NoneType Error\n                users = [] \n            \n            users.append(user_data)\n            encrypted_data = encrypt_json(users, symmetric_key)\n            \n            with open(\"app/data/encrypted_users.json\", \"wb\") as f:\n                f.write(encrypted_data)\n\n            return \"User created successfully\"\n\n        return render_template('admin/admin_signup.html')\n\n###\n#DASHBOARD PAGES\n###\npage_names=[]\nprint('PAGES \\n #############################################',file=sys.stdout)\nprint(pages_list(\"page.html\"),file=sys.stdout)\ni=0\n\n@login_required\n@admin_custom_blueprint.route('/dashboard', methods=['GET'])\ndef dashboard():\n    if 'admin_authorized' not in session:\n        return redirect(url_for('admin_custom.admin_access'))\n    else:\n        # Assuming you have a way to fetch the pages\n        pages = pages_list(\"page.html\")\n\n        # Fetch the public_key from session\n        public_key = None\n        if 'public_key' in session:\n            public_key = session['public_key']\n        \n        return render_template('admin/dashboard.html', pages=pages_list(\"page.html\"), public_key=session[\"public_key\"])\n\n\n@login_required\n@admin_custom_blueprint.route('/new_page', methods=['GET'])\ndef new_page():\n    if 'admin_authorized' not in session:\n        return redirect(url_for('admin_custom.admin_access'))\n    # Load the menu.json file\n    with open(\"app/controllers/menu.json\", 'r') as f:\n        menu_data = json.load(f)\n        \n    # Extract the parent menu names\n    parent_menus = [item['name'] for item in menu_data]\n    \n    return render_template('admin/new_page.html', parent_menus=parent_menus)\n \n@login_required\n@admin_custom_blueprint.route('/edit-page', methods=['GET', 'POST'])\ndef edit_page():\n    link = request.args.get('link')\n\n    if 'public_key' in session:\n        public_key = session['public_key']\n    else:\n        request.args.get('public_key')\n    \n    if request.method == 'POST':\n        name = request.form.get(\"name\")\n        new_link = request.form.get(\"link\")\n        content = request.form.get(\"content\")\n        category = request.form.get(\"category\")\n        \n        # Function to update JSON\n        def update_json(link, new_link, name, category):\n            with open(\"app/controllers/menu.json\", 'r') as f:\n                data = json.load(f)\n                \n            for menu_item in data:\n                if menu_item['link'] == link:\n                    menu_item['name'] = name\n                    menu_item['link'] = new_link\n                    menu_item['category'] = category\n                \n            with open(\"app/controllers/menu.json\", 'w') as f:\n                json.dump(data, f, indent=4)\n        \n        update_json(link, new_link, name, category)\n\n        return redirect(url_for('admin_custom.dashboard'))\n\n    return render_template('admin/edit.html', article_content=(get_content_by_name(pages_list('page.html'), link)), link=link, public_key=public_key)\n    \n@login_required\n@admin_custom_blueprint.route('/webmaster-add-page', methods=['POST'])\ndef webmaster_add_page():\n    import os\n\n    current_directory = os.getcwd()\n    print(\"Current Working Directory:\", current_directory,file=sys.stdout)\n    title = request.form.get(\"title\")\n    slug = request.form.get(\"slug\")\n    content = request.form.get(\"content\")\n\n    template_content = '''\n    {{% extends \"page.html\" %}}\n    {{% block pagecontent %}}\n    \n    <div>{}</div>\n    {{% endblock %}}\n    '''.format(content)\n    \n    with open(\"./app/templates/\" + slug + \".html\", \"w\") as f:\n        f.write(template_content)\n\n    return redirect(url_for('main.page', slug=slug))\n\n@login_required\n@admin_custom_blueprint.route('/delete-page', methods=['POST'])\ndef delete_page():\n    if 'public_key' in session:\n        public_key = session['public_key']\n        link_to_delete = request.form.get('link')\n\n        # Delete the template file\n        try:\n            os.remove(f\"./app/templates/{link_to_delete}.html\")\n        except FileNotFoundError:\n            # Handle error if the file doesn't exist\n            pass\n\n        # Update menu.json\n        with open(\"app/controllers/menu.json\", 'r') as f:\n            data = json.load(f)\n\n        data = [item for item in data if item['link'] != link_to_delete]\n        \n        with open(\"app/controllers/menu.json\", 'w') as f:\n            json.dump(data, f, indent=4)\n\n        return redirect(url_for('admin_custom.dashboard'))\n    else:\n        # Handle unauthorized access\n        return redirect(url_for('main.home')) ",
        "path": "app/controllers/admin.py"
    },
    {
        "name": "data.py",
        "content": "from app import db\nfrom app.models.user import User\nimport uuid \nimport sys\ndef create_admin_user():\n    # First check if an admin user already exists\n    existing_admin = User.query.filter_by(role='admin').first()\n\n    if existing_admin:\n        print(\"Admin user already exists!\")\n        return\n\n    admin_user = User(username=\"admin\", email=\"admin@example.com\", role=\"admin\")\n    admin_user.password = \"strongpassword\"\n    db.session.add(admin_user)\n    db.session.commit()\n    print(\"Admin user created!\")\n\ndef add_visitor(unique_id=None):\n    \n    if not unique_id:\n        unique_id = str(uuid.uuid4())  # Generates a random UUID\n\n    # Check if a visitor with this ID already exists\n    existing_visitor = User.query.filter_by(username=unique_id).first()\n    if existing_visitor:\n        print(f\"Visitor with ID {unique_id} already exists!\")\n        return existing_visitor\n\n    visitor = User(username=unique_id, role=\"visitor\")\n    db.session.add(visitor)\n    db.session.commit()\n    print(f\"Visitor with ID {unique_id} added!\",file=sys.stdout)\n    return visitor",
        "path": "app/controllers/data.py"
    },
    {
        "name": "get_pages.py",
        "content": "import os\nimport json\nimport zlib\nimport sys\nimport base64\ndef find_extending_files(base_template_name):\n    #gets menu.json\n    with open(\"app/controllers/menu.json\", 'r') as f:\n        menu_data = json.load(f)\n\n    link_to_menu = {}\n    for menu_item in menu_data:\n        link = menu_item.get(\"link\", None)\n        if link:\n            link_to_menu[link] = menu_item\n\n        for submenu_item in menu_item.get('submenu', []):\n            sub_link = submenu_item.get(\"link\", None)\n            if sub_link:\n                link_to_menu[sub_link] = submenu_item\n\n    pages = []\n\n    templates_dir = os.path.join(os.getcwd(), \"app/templates\")\n\n    for filename in os.listdir(templates_dir):\n        if filename.endswith(\".html\"):\n            filepath = os.path.join(templates_dir, filename)\n            with open(filepath, 'r', encoding='utf-8') as f:\n                content = f.read()\n\n            extends_line = \"{{% extends \\\"{}\\\" %}}\".format(base_template_name)\n            if extends_line in content:  # Indentation corrected here\n                compressed_content = zlib.compress(content.encode('utf-8'))\n                compressed_content_str = base64.b64encode(compressed_content).decode('utf-8')\n                link = filename.replace(\".html\", \"\")\n                name = link\n                parent_menu = None\n                menu_item = link_to_menu.get(link, {})\n                if menu_item:\n                    name = menu_item.get('name', name)\n                    parent_menu = menu_item.get('parent_menu', parent_menu)\n\n                \n                pages.append({\n                    \"link\": link,\n                    \"name\": name,\n                    \"content\": compressed_content_str,  # Store the base64-encoded string\n                    \"parent_menu\": parent_menu\n                })\n\n    return pages  \n\n\n# Example usage\nresult = find_extending_files",
        "path": "app/controllers/get_pages.py"
    },
    {
        "name": "login.py",
        "content": "from functools import wraps\nfrom flask import session\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n\n        if 'logged_in' not in session or session['logged_in']==False:\n            return redirect(url_for('login'))\n        return f(*args, **kwargs)\n    return decorated_function",
        "path": "app/controllers/login.py"
    },
    {
        "name": "main.py",
        "content": "from flask import render_template,redirect,url_for, request, make_response\nfrom flask_jwt_extended import verify_jwt_in_request, get_jwt_identity, create_access_token, create_refresh_token,  set_access_cookies\nimport traceback\nfrom app.services.jwt_tools import generate_token\nfrom app.models.user import User\nfrom functools import wraps\nimport sys\nimport os\nimport json\nfrom app import app, db\nfrom app.models.page import Page\nimport app.services.sms_tools as sms_tools\nfrom app.services.db_tools import create_user, update_user, delete_user, get_user_by_phone\ncreate_twilio_client=sms_tools.create_twilio_client\nget_credentials_from_env=sms_tools.get_credentials_from_env\ncheck_sms_verification=sms_tools.check_sms_verification\nget_credentials_from_env=sms_tools.get_credentials_from_env\nsend_sms_verification=sms_tools.send_sms_verification\n\nfrom flask import Blueprint, render_template\n\nmain = Blueprint('main', __name__)\n\ndef login_required(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        # your existing logic here\n        return f(*args, **kwargs)\n    return decorated_function\n\n\n\n\n@main.route('/signup', methods=['GET', 'POST'])\ndef signup():\n    # If it's a GET request, render the signup form\n    if request.method == 'GET':\n        return render_template('signup.html')\n\n    # If it's a POST request (form submission), start the verification process\n    if request.method == 'POST':\n        phone_number = str('+1'+request.form.get('phone_number'))\n        print(phone_number, file=sys.stdout)\n\n        account_sid, auth_token, service_sid = get_credentials_from_env()\n\n        client = create_twilio_client(account_sid, auth_token)\n\n        send_sms_verification(client, service_sid, phone_number)\n\n        long_term_token = generate_token()\n        resp = make_response(redirect(url_for('verify',phone_number=phone_number)))\n        resp.set_cookie('lt_token', long_term_token, httponly=True, samesite='Strict')\n\n        # Redirect the user to the OTP verification page with the response that contains the long term token\n        return resp\n    \n\n\n@main.route('/page/<slug>')\ndef page(slug):\n    # Use relative path for Flask\n    template_path = os.path.join(\"app/templates\", \"{}.html\".format(slug))\n    current_directory = os.getcwd()\n\n    try:\n        if os.path.exists(os.path.join(current_directory, template_path)):\n            with open(\"app/controllers/menu.json\") as menu_file:\n                menu_items = json.load(menu_file)\n            return render_template((\"{}.html\".format(slug)),menu_data=menu_items)\n        else:\n            page = Page.query.filter_by(slug=slug).first_or_404()\n            with open(\"app/controllers/menu.json\") as menu_file:\n                menu_items = json.load(menu_file)\n            return render_template('page.html', page=page, menu_data=menu_items)\n    except Exception as e:\n        traceback_str = traceback.format_exc()\n        return(f'''COULD NOT RETURN PAGE from {template_path} \n                \\n WORKING DIRECTORY: {current_directory} \n                \\n TEMPLATE REQUESTED: {template_path}, template: {(slug + \".html\")}\n                \\n EXCEPTION: {str(e)}\n                \\n TRACEBACK: {traceback_str}''')\n@main.route('/')\ndef index():\n    with open(\"app/controllers/menu.json\") as menu_file:\n        menu_items = json.load(menu_file)\n    return render_template('index.html', menu_data=menu_items)\n@app.route('/index')\ndef index():\n    with open(\"app/controllers/menu.json\") as menu_file:\n        menu_items = json.load(menu_file)\n    return render_template('index.html', menu_data=menu_items)\n",
        "path": "app/controllers/main.py"
    },
    {
        "name": "encrypted_users.json",
        "content": "",
        "path": "app/data/encrypted_users.json"
    },
    {
        "name": "db_tools.py",
        "content": "import json\nfrom flask_jwt_extended import create_refresh_token\nimport uuid\nfrom flask import request, abort\n\nimport sys\nfrom app import db\nfrom app.models.user import User\nfrom app.models.user import RoleEnum\nfrom app.services.jwt_tools import generate_token\nRoleEnum = RoleEnum\ndef transact_and_record(operation, entity, **kwargs):\n    try:\n        operation(entity)\n        db.session.commit()\n        \n        # Record the transaction\n        try:\n            with open('transactions.json', 'a') as file:\n                file.write(json.dumps({\n                    \"operation\": operation.__name__,\n                    \"entity\": str(entity),\n                    \"parameters\": kwargs\n                }) + \"\\n\")\n        except IOError:\n            print(\"Error recording transaction to file.\")\n        \n    except Exception as e:\n        db.session.rollback()\n        print(\"Error during transaction: \", e)\n\n\n\ndef create_user(phone, password=None, role=RoleEnum.admin):\n    user = User(phone=phone, password=password, role=role)\n    user.refresh_token = create_refresh_token(identity=user.id)\n    user.long_term_token = generate_token()\n    transact_and_record(db.session.add, user)\n    return user\n\ndef update_user(user, **kwargs):\n    for key, value in kwargs.items():\n        setattr(user, key, value)\n    refresh_token = kwargs.get('refresh_token')\n    if refresh_token:\n        user.refresh_token = refresh_token\n    transact_and_record(db.session.commit, user, **kwargs)\n    return user\ndef get_user_by_id(id):\n    return User.query.get(id)\n\n\n\ndef delete_user(user):\n    transact_and_record(db.session.delete, user)\n\n\n\ndef get_user_by_phone(phone):\n    return User.query.filter_by(phone=phone).first()\n\n",
        "path": "app/services/db_tools.py"
    },
    {
        "name": "generate_key.py",
        "content": "from cryptography.hazmat.primitives import serialization\nfrom cryptography.fernet import Fernet\nsymmetric_key = Fernet.generate_key()\nwith open(\"symmetric_key.key\", \"wb\") as key_file:\n    key_file.write(symmetric_key)\n",
        "path": "app/services/generate_key.py"
    },
    {
        "name": "json_tools.py",
        "content": "\nimport cryptography\nimport json\nimport base64\nfrom cryptography.hazmat.primitives import serialization\n\nfrom cryptography.fernet import Fernet\n\ndef safe_encode(value):\n    \n    if isinstance(value, bytes):\n        return base64.b64encode(value).decode('utf-8')\n    return value\n\ndef safe_encode_dict(d):\n    \n    return {k: safe_encode(v) for k, v in d.items()}\n\ndef encrypt_json(data, symmetric_key):\n    \"\"\"\n    Encrypts a Python object (list or dictionary) into JSON-formatted string and then encrypts it with a symmetric key.\n\n    :param data: Python object (list or dictionary) to be encrypted.\n    :param symmetric_key: Symmetric key used for encryption.\n    :return: Encrypted bytes.\n    \"\"\"\n    safe_data = [safe_encode_dict(item) if isinstance(item, dict) else safe_encode(item) for item in data]\n\n    # Convert the Python object to a JSON-formatted string\n    json_string = json.dumps(safe_data).encode('utf-8')\n    cipher_suite = Fernet(symmetric_key)\n    encrypted_data = cipher_suite.encrypt(json_string)\n    \n    return encrypted_data\ndef decrypt_json(encrypted_data, symmetric_key):\n    try:\n        cipher_suite = Fernet(symmetric_key)\n        decrypted_data = cipher_suite.decrypt(encrypted_data)\n        return json.loads(decrypted_data.decode('utf-8'))\n    except cryptography.fernet.InvalidToken as e:\n        print(f\"InvalidToken exception: {e}\")\n        return None\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return None\n",
        "path": "app/services/json_tools.py"
    },
    {"name":"menu.json",
    "content":"[{"name": "Home","link": "index","submenu": [{"name": "submenu item 1", "link":"item-1"}]},{"name": "Item 2","link": "admin","submenu": [{"name": "submenu item 1", "link":"item-2"}]","path":"app/data/menu.json"}
]